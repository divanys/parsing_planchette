import asyncio
import json
import logging
import sys
from datetime import datetime

from aiogram import Router

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, KeyboardButton
import Links_tg

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞

router = Router(name=__name__)


class DateState(StatesGroup):
    waiting_for_date = State()
    waiting_for_data_type = State()
    waiting_for_value = State()
    waiting_for_action = State()
    waiting_for_concrete = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç. –Ø –ø–æ–º–æ–≥—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—à–µ—Ç–∫—É –†–ö–°–ò.\n\n"
                         "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search\n"
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ /cancel\n"
                         "–î–ª—è –ø–æ–º–æ—â–∏ /help\n"
                         "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ /remove_pattern\n"
                         "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª /rules\n\n"
                         "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é: \n"
                         "–í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /search -> –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ò—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é' -> –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É ->"
                         " –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∏–ø –¥–ª—è –ø–æ–∏—Å–∫–∞ -> –í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏ -> "
                         "–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É/–≤—Å–µ –ø–∞—Ä—ã.\n\n"
                         "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: \n"
                         "–í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /search -> –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω' ->"
                         " –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: -> –í—ã–±—Ä–∞—Ç—å '–¥–∞' -> –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞ -> –í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                         "‚ö† –®–∞–±–ª–æ–Ω –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø–∞—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É.\n–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω /remove_pattern; –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)",
                         reply_markup=ReplyKeyboardRemove())


@router.message(Command("search"))
async def cmd_search(message: types.Message):
    kb = [
        [KeyboardButton(text="–ò—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é"),
         KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
    await message.answer(
        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n\n"
        "üçô –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –ö–Ω–æ–ø–∫–∞ '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω' –≥–æ—Ç–æ–≤–∞! —é–∑–∞–π—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å)\n–ü–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–∂–Ω–æ /rules",
        reply_markup=keyboard)


@router.message(Command("help"))
async def help_cmd(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ +79895099849\n"
                         "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search –∏ –¥–∞–ª—å—à–µ –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–º)", reply_markup=ReplyKeyboardRemove())
    await state.clear()


@router.message(Command("cancel"))
async def help_cmd(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–∞, –∑–∞–∫—Ä—É–≥–ª—è–µ–º—Å—è...", reply_markup=ReplyKeyboardRemove())
    await state.clear()


@router.message(F.text.lower() == "–∏—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é")
async def date_command(message: types.Message, state: FSMContext) -> None:
    with open('/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/files_data.json', 'r') as f:
        data = json.load(f)

    keyboard = []

    for key in data.keys():
        button = [KeyboardButton(text=str(key).replace(".xlsx", ""))]
        keyboard.append(button)

    keyboard = types.ReplyKeyboardMarkup(keyboard=keyboard, input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
    await state.set_state(DateState.waiting_for_date)


@router.message(DateState.waiting_for_date)
async def handle_date_choice(message: types.Message, state: FSMContext):
    selected_date = message.text

    with open('/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/files_data.json', 'r') as f:
        dates_data = json.load(f)

    if (str(selected_date) + ".xlsx") in dates_data:
        await state.update_data(selected_date=(str(selected_date) + ".xlsx"))
        keyboard = types.ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–ö–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text='–ì—Ä—É–ø–ø–∞'),
             KeyboardButton(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')]
        ], input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
        await state.set_state(DateState.waiting_for_data_type)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")


@router.message(DateState.waiting_for_data_type)
async def handle_data_type_choice(message: types.Message, state: FSMContext):
    data_type = message.text
    await state.update_data(data_type=data_type)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {str(data_type.lower()).replace('–ø–ø–∞', '–ø–ø—É').replace('–∞—Ç–µ–ª—å', '–∞—Ç–µ–ª—è')}:\n\n"
                         f"–î–ª—è —Å–ø—Ä–∞–≤–∫–∏:\n"
                         "   1. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É, –≤–≤–æ–¥–∏—Ç—å –µ—ë –≤–∏–¥–∞ –ò–°-33 –∏–ª–∏ 2-–ò–°-3 –∏–ª–∏ –ü–û–ö–°-45w\n"
                         "   2. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ –ì–∞–ª—É—à–∫–∏–Ω–∞ –î.–ï.\n"
                         "   3. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–∞–±–∏–Ω–µ—Ç, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ 306 –∏–ª–∏ 110–∞ –∏–ª–∏ –û–±—â1-3\n\n"
                         "‚ö† –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è! ", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DateState.waiting_for_value)


@router.message(DateState.waiting_for_value)
async def handle_value_input(message: types.Message, state: FSMContext):
    value = message.text
    await state.update_data(value=str(value).lower())
    keyboard = types.ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–í—Å–µ –ø–∞—Ä—ã'), KeyboardButton(text='–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è')]
    ], input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ '–í—Å–µ –ø–∞—Ä—ã' –∏–ª–∏ '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è':", reply_markup=keyboard)
    await state.set_state(DateState.waiting_for_action)


@router.message(DateState.waiting_for_action, F.text.lower() == '–≤—Å–µ –ø–∞—Ä—ã')
async def handle_all_classes_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()

    lst_room = ["room_a", "room_d"]
    lst_group = ["group_b", 'group_e']
    lst_teacher = ["teacher_c", "teacher_f"]

    file_path = f'/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/all_planchette/{str(data["selected_date"]).replace(".xlsx", "")}.json'
    try:
        with open(file_path, 'r') as f:
            json_file = json.load(f)

        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {str(data['data_type']).lower().replace('–ø–ø–∞', '–ø–ø—É').replace('–∞—Ç–µ–ª—å', '–∞—Ç–µ–ª—è')} {str(data['value']).title()} –∑–∞ {str(data['selected_date']).replace('.xlsx', '')} –∏ –≤—Å–µ –ø–∞—Ä—ã.",
            reply_markup=ReplyKeyboardRemove())

        message_all = ""

        for num_para, items in json_file.items():
            await state.update_data(num_para=num_para)
            data = await state.get_data()

            if str(data['num_para']) in json_file:
                if data['data_type'] == "–ì—Ä—É–ø–ø–∞":
                    message_all += await handle_group_type(data, json_file, lst_group, lst_room, lst_teacher)
                elif data['data_type'] == "–ö–∞–±–∏–Ω–µ—Ç":
                    message_all += await handle_room_type(data, json_file, lst_group, lst_room, lst_teacher)
                elif data['data_type'] == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
                    message_all += await handle_teacher_type(data, json_file, lst_group, lst_room, lst_teacher)
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")

            await state.update_data(num_para=None)  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–µ
        await message.answer(message_all, reply_markup=ReplyKeyboardRemove())


    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    finally:
        await state.clear()
    await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


@router.message(DateState.waiting_for_action, F.text.lower() == '–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è')
async def handle_concrete_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()
    with open('/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/data_concretn.json', 'r') as f:
        data_concretn = json.load(f)

    keyboard = []

    for item in data_concretn.get(data['selected_date'], []):
        button = [KeyboardButton(text=item)]
        keyboard.append(button)

    keyboard = types.ReplyKeyboardMarkup(keyboard=keyboard, input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=keyboard)
    await state.set_state(DateState.waiting_for_concrete)


@router.message(DateState.waiting_for_concrete)
async def handle_concrete_choice_is(message: types.Message, state: FSMContext):
    num_para = message.text
    lst_room = ["room_a", "room_d"]
    lst_group = ["group_b", 'group_e']
    lst_teacher = ["teacher_c", "teacher_f"]

    await state.update_data(num_para=num_para)
    data = await state.get_data()

    file_path = f'/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/all_planchette/{str(data["selected_date"]).replace(".xlsx", "")}.json'

    try:
        with open(file_path, 'r') as f:
            json_file = json.load(f)

        if str(data['num_para']) in json_file:
            if data['data_type'] == "–ì—Ä—É–ø–ø–∞":
                messages = await handle_group_type(data, json_file, lst_group, lst_room, lst_teacher)
                await message.answer(messages, reply_markup=ReplyKeyboardRemove())
            elif data['data_type'] == "–ö–∞–±–∏–Ω–µ—Ç":
                messages = await handle_room_type(data, json_file, lst_group, lst_room, lst_teacher)
                await message.answer(messages, reply_markup=ReplyKeyboardRemove())
            elif data['data_type'] == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
                messages = await handle_teacher_type(data, json_file, lst_group, lst_room, lst_teacher)
                await message.answer(messages, reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    finally:
        await state.clear()
    await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


async def handle_group_type(data, json_file, lst_group, lst_room, lst_teacher):
    found_items = []
    message_all = ""

    if isinstance(json_file[data['num_para']], list):
        for item in json_file[data['num_para']]:
            found = await handle_group_item(data, item, lst_group, lst_room, lst_teacher)
            if found:
                found_items.append(found)
                message_all += found

    else:
        found = await handle_group_item(data, json_file[data['num_para']], lst_group, lst_room, lst_teacher)
        if found:
            found_items.append(found)
            message_all += found

    if not found_items:
        message_all += \
            f"‚ùå {str(data['num_para'])}: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç.\n\n"

    return message_all


async def handle_group_item(data, item, lst_group, lst_room, lst_teacher):
    message_all = ""
    for group_key in lst_group:
        if item.get(group_key) is not None and data['value'] in item.get(group_key):
            message_all += \
                f"‚úÖ {data['num_para']}.\n" \
                f"  –ö–∞–±–∏–Ω–µ—Ç: {item.get(lst_room[lst_group.index(group_key)])}\n" \
                f"  –ì—Ä—É–ø–ø–∞: {str(item.get(group_key)).upper()}\n" \
                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item.get(lst_teacher[lst_group.index(group_key)])).title()}\n\n"

    return message_all


async def handle_room_type(data, json_file, lst_group, lst_room, lst_teacher):
    found_items = []
    message_all = ""

    if isinstance(json_file[data['num_para']], list):
        for item in json_file[data['num_para']]:
            found = await handle_room_item(data, item, lst_group, lst_room, lst_teacher)
            if found:
                found_items.append(found)
                message_all += found

    else:
        found = await handle_room_item(data, json_file[data['num_para']], lst_group, lst_room, lst_teacher)
        if found:
            found_items.append(found)
            message_all += found

    if not found_items:
        message_all += \
            f"‚ùå {str(data['num_para'])}: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç.\n\n"

    return message_all


async def handle_room_item(data, item, lst_group, lst_room, lst_teacher):
    message_all = ""

    for room_key in lst_room:
        if item.get(room_key) is not None and data['value'] in str(item.get(room_key)).lower() and str(
                item.get(lst_group[lst_room.index(room_key)])).title() != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            message_all += \
                f"‚úÖ {data['num_para']}.\n" \
                f"  –ö–∞–±–∏–Ω–µ—Ç: {item.get(room_key)}\n" \
                f"  –ì—Ä—É–ø–ø–∞: {str(item.get(lst_group[lst_room.index(room_key)])).title()}\n" \
                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item.get(lst_teacher[lst_room.index(room_key)])).title()}\n\n"

    return message_all


async def handle_teacher_type(data, json_file, lst_group, lst_room, lst_teacher):
    found_items = []
    message_all = ""

    if isinstance(json_file[data['num_para']], list):
        for item in json_file[data['num_para']]:
            found = await handle_teacher_item(data, item, lst_group, lst_room, lst_teacher)
            if found:
                found_items.append(found)
                message_all += found
    else:
        found = await handle_teacher_item(data, json_file[data['num_para']], lst_group, lst_room, lst_teacher)
        if found:
            found_items.append(found)
            message_all += found

    if not found_items:
        message_all += \
            f"‚ùå {str(data['num_para'])}: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç.\n\n"

    return message_all


async def handle_teacher_item(data, item, lst_group, lst_room, lst_teacher):
    message_all = ""
    for teacher_key in lst_teacher:
        if item.get(teacher_key) is not None and str(data['value']).replace('. ', '.') in item.get(teacher_key):
            message_all += \
                f"‚úÖ {data['num_para']}.\n" \
                f"  –ö–∞–±–∏–Ω–µ—Ç: {item.get(lst_room[lst_teacher.index(teacher_key)])}\n" \
                f"  –ì—Ä—É–ø–ø–∞: {str(item.get(lst_group[lst_teacher.index(teacher_key)])).upper()}\n" \
                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item.get(teacher_key)).title()}\n\n"

    return message_all


class DataStateConst(StatesGroup):
    waiting_for_reg_pattern = State()
    waiting_for_data_type_const = State()
    waiting_for_value_const = State()


@router.message(F.text.lower() == "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")
async def pattern_reg_or_print(message: types.Message, state: FSMContext) -> None:
    with open('/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/tg/pattern_for_user.json',
              'r') as f:
        data_user = json.load(f)

    lst_room = ["room_a", "room_d"]
    lst_group = ["group_b", 'group_e']
    lst_teacher = ["teacher_c", "teacher_f"]

    file_path = f'/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/all_planchette/' \
                f'{datetime.now().strftime("%d.%m.%Y")}.json'
    user_id_for_pattern = str(message.from_user.id)

    try:
        with open(file_path, 'r') as f:
            json_file = json.load(f)

        message_all = ""

        if user_id_for_pattern in data_user:
            user_data = data_user[user_id_for_pattern]

            for item in user_data:
                type_for_search = item.get("type")
                value_for_search = item.get("value")

                if type_for_search and value_for_search:
                    await message.answer(
                        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n–í—ã –≤—ã–±—Ä–∞–ª–∏ {type_for_search.lower().replace('–ø–ø–∞', '–ø–ø—É').replace('–∞—Ç–µ–ª—å', '–∞—Ç–µ–ª—è')} {value_for_search.title()}")
                    for num_para, items in json_file.items():
                        if str(num_para) in json_file:
                            if type_for_search == "–ì—Ä—É–ø–ø–∞":
                                for group_key in lst_group:
                                    for item1 in json_file[str(num_para)]:
                                        if item1.get(group_key) is not None and value_for_search in item1.get(
                                                group_key):
                                            message_all += \
                                                f"‚úÖ {num_para}.\n" \
                                                f"  –ö–∞–±–∏–Ω–µ—Ç: {item1.get(lst_room[lst_group.index(group_key)])}\n" \
                                                f"  –ì—Ä—É–ø–ø–∞: {str(item1.get(group_key)).upper()}\n" \
                                                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item1.get(lst_teacher[lst_group.index(group_key)])).title()}\n\n"


                            elif type_for_search == "–ö–∞–±–∏–Ω–µ—Ç":
                                for room_key in lst_room:
                                    for item1 in json_file[str(num_para)]:
                                        if item1.get(room_key) is not None and value_for_search in str(
                                                item1.get(room_key)).lower() and str(
                                            item1.get(
                                                lst_group[lst_room.index(room_key)])).title() != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                                            message_all += \
                                                f"‚úÖ {num_para}.\n" \
                                                f"  –ö–∞–±–∏–Ω–µ—Ç: {item1.get(room_key)}\n" \
                                                f"  –ì—Ä—É–ø–ø–∞: {str(item1.get(lst_group[lst_room.index(room_key)])).title()}\n" \
                                                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item1.get(lst_teacher[lst_room.index(room_key)])).title()}\n\n"

                            elif type_for_search == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
                                for teacher_key in lst_teacher:
                                    for item1 in json_file[str(num_para)]:
                                        if item1.get(teacher_key) is not None and value_for_search.replace('. ',
                                                                                                           '.') in item1.get(
                                            teacher_key):
                                            message_all += \
                                                f"‚úÖ {num_para}.\n" \
                                                f"  –ö–∞–±–∏–Ω–µ—Ç: {item1.get(lst_room[lst_teacher.index(teacher_key)])}\n" \
                                                f"  –ì—Ä—É–ø–ø–∞: {str(item1.get(lst_group[lst_teacher.index(teacher_key)])).upper()}\n" \
                                                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item1.get(teacher_key)).title()}\n\n"
                            else:
                                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")

            if message_all != "":
                await message.answer(message_all, reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer("–í—ã –ª–∏–±–æ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞, –ª–∏–±–æ –ø–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç."
                                     "\n–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω /remove_pattern\n",
                                     reply_markup=ReplyKeyboardRemove())

            await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")

        else:
            keyboard = types.ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="–î–∞"), KeyboardButton(text='–ù–µ—Ç')]],
                input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")

            await message.answer("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω! –ñ–µ–ª–∞–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å?)", reply_markup=keyboard)
            await state.update_data(id_user_const=user_id_for_pattern)

            await state.set_state(DataStateConst.waiting_for_reg_pattern)


    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")


@router.message(DataStateConst.waiting_for_reg_pattern, F.text.lower() == '–¥–∞')
async def handle_date_choice_const(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ö–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text='–ì—Ä—É–ø–ø–∞'),
         KeyboardButton(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')]
    ], input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(DataStateConst.waiting_for_data_type_const)


@router.message(DataStateConst.waiting_for_data_type_const)
async def handle_data_type_choice_const(message: types.Message, state: FSMContext):
    type_value = message.text
    await state.update_data(type_value=type_value)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {str(type_value.lower()).replace('–ø–ø–∞', '–ø–ø—É').replace('–∞—Ç–µ–ª—å', '–∞—Ç–µ–ª—è')}:\n\n"
                         f"–î–ª—è —Å–ø—Ä–∞–≤–∫–∏:\n"
                         "   1. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É, –≤–≤–æ–¥–∏—Ç—å –µ—ë –≤–∏–¥–∞ –ò–°-33 –∏–ª–∏ 2-–ò–°-3 –∏–ª–∏ –ü–û–ö–°-45w\n"
                         "   2. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ –ì–∞–ª—É—à–∫–∏–Ω–∞ –î.–ï.\n"
                         "   3. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–∞–±–∏–Ω–µ—Ç, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ 306 –∏–ª–∏ 110–∞ –∏–ª–∏ –û–±—â1-3\n\n"
                         "‚ö† –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è! ", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DataStateConst.waiting_for_value_const)


@router.message(DataStateConst.waiting_for_value_const)
async def final_reg_const(message: types.Message, state: FSMContext):
    data = await state.get_data()

    id_value = str(data["id_user_const"])
    type_value = (data["type_value"])
    value_value = str(message.text).lower()

    file_path1 = '/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/tg/pattern_for_user.json'

    try:
        with open(file_path1, 'r', encoding='utf-8') as file:
            existing_data = json.load(file)
    except FileNotFoundError:
        existing_data = {}

    new_entry = {
        "type": type_value,
        "value": value_value
    }

    existing_data[id_value] = [new_entry]

    with open(file_path1, 'w', encoding='utf-8') as file:
        json.dump(existing_data, file, ensure_ascii=False, indent=2)

    with open('/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/tg/pattern_for_user.json',
              'r') as f:
        data_user = json.load(f)

    lst_room = ["room_a", "room_d"]
    lst_group = ["group_b", 'group_e']
    lst_teacher = ["teacher_c", "teacher_f"]

    file_path = f'/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/all_planchette/' \
                f'{datetime.now().strftime("%d.%m.%Y")}.json'
    user_id_for_pattern = id_value

    try:
        with open(file_path, 'r') as f:
            json_file = json.load(f)

        message_all = ""

        if user_id_for_pattern in data_user:
            user_data = data_user[user_id_for_pattern]

            for item in user_data:
                type_for_search = item.get("type")
                value_for_search = item.get("value")

                if type_for_search and value_for_search:
                    await message.answer(
                        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n–í—ã –≤—ã–±—Ä–∞–ª–∏ {type_for_search.lower().replace('–ø–ø–∞', '–ø–ø—É').replace('–∞—Ç–µ–ª—å', '–∞—Ç–µ–ª—è')} {value_for_search.title()}")
                    for num_para, items in json_file.items():
                        if str(num_para) in json_file:
                            if type_for_search == "–ì—Ä—É–ø–ø–∞":
                                for group_key in lst_group:
                                    for item1 in json_file[str(num_para)]:
                                        if item1.get(group_key) is not None and value_for_search in item1.get(
                                                group_key):
                                            message_all += \
                                                f"‚úÖ {num_para}.\n" \
                                                f"  –ö–∞–±–∏–Ω–µ—Ç: {item1.get(lst_room[lst_group.index(group_key)])}\n" \
                                                f"  –ì—Ä—É–ø–ø–∞: {str(item1.get(group_key)).upper()}\n" \
                                                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item1.get(lst_teacher[lst_group.index(group_key)])).title()}\n\n"

                            elif type_for_search == "–ö–∞–±–∏–Ω–µ—Ç":
                                for room_key in lst_room:
                                    for item1 in json_file[str(num_para)]:
                                        if item1.get(room_key) is not None and value_for_search in str(
                                                item1.get(room_key)).lower() and str(
                                            item1.get(
                                                lst_group[lst_room.index(room_key)])).title() != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                                            message_all += \
                                                f"‚úÖ {num_para}.\n" \
                                                f"  –ö–∞–±–∏–Ω–µ—Ç: {item1.get(room_key)}\n" \
                                                f"  –ì—Ä—É–ø–ø–∞: {str(item1.get(lst_group[lst_room.index(room_key)])).title()}\n" \
                                                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item1.get(lst_teacher[lst_room.index(room_key)])).title()}\n\n"

                            elif type_for_search == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
                                for teacher_key in lst_teacher:
                                    for item1 in json_file[str(num_para)]:
                                        if item1.get(teacher_key) is not None and value_for_search.replace('. ',
                                                                                                           '.') in item1.get(
                                            teacher_key):
                                            message_all += \
                                                f"‚úÖ {num_para}.\n" \
                                                f"  –ö–∞–±–∏–Ω–µ—Ç: {item1.get(lst_room[lst_teacher.index(teacher_key)])}\n" \
                                                f"  –ì—Ä—É–ø–ø–∞: {str(item1.get(lst_group[lst_teacher.index(teacher_key)])).upper()}\n" \
                                                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item1.get(teacher_key)).title()}\n\n"
                            else:
                                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")

            if message_all != "":
                await message.answer(message_all, reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer("–í—ã –ª–∏–±–æ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞, –ª–∏–±–æ –ø–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç."
                                     "\n–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω /remove_pattern\n",
                                     reply_markup=ReplyKeyboardRemove())

    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    finally:
        await state.clear()

    await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


@router.message(Command('remove_pattern'))
async def remove_pattern(message: types.Message):
    user_id = str(message.from_user.id)
    file_path = '/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/parsing_planchette/tg/pattern_for_user.json'

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            existing_data = json.load(file)
    except FileNotFoundError:
        existing_data = {}

    if user_id in existing_data:
        del existing_data[user_id]

        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(existing_data, file, ensure_ascii=False, indent=2)

        await message.answer("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.", reply_markup=ReplyKeyboardRemove())


@router.message(Command('rules'))
async def print_rules(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é: \n"
                         "–í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /search -> –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ò—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é' -> –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É ->"
                         " –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–∏–ø –¥–ª—è –ø–æ–∏—Å–∫–∞ -> –í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏ -> "
                         "–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É/–≤—Å–µ –ø–∞—Ä—ã.\n\n"
                         "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: \n"
                         "–í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /search -> –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω' ->"
                         " –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: -> –í—ã–±—Ä–∞—Ç—å '–¥–∞' -> –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞ -> –í–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                         "‚ö† –®–∞–±–ª–æ–Ω –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø–∞—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É.\n–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω /remove_pattern; –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)",
                         reply_markup=ReplyKeyboardRemove())


@router.message(DataStateConst.waiting_for_reg_pattern, F.text.lower() == '–Ω–µ—Ç')
async def handle_date_choice_const(message: types.Message):
    await message.answer("–õ–∞–¥–Ω–æ.", reply_markup=ReplyKeyboardRemove())


@router.message(F.text.lower())
async def another_data_command(message: types.Message) -> None:
    await message.answer("–Ø —Ç–∞–∫ –Ω–µ –ø–æ–Ω–∏–º–∞—é\n"
                         "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(token=Links_tg.api_tg, parse_mode=ParseMode.HTML)
    # And the run events dispatching
    dp = Dispatcher()
    # ... and all other routers should be attached to Dispatcher
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
