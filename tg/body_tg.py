import asyncio
import json
import logging
import sys
from datetime import datetime, timedelta, date

from aiogram import Router, Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, KeyboardButton

import Links_tg

# –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
router = Router(name=__name__)


class DateState(StatesGroup):  # –¥–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ "–ò—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é"
    waiting_for_date = State()
    waiting_for_data_type = State()
    waiting_for_value = State()
    waiting_for_action = State()
    waiting_for_concrete = State()


class DateStateMainBeach(StatesGroup):  # –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –ø–ª—è–∂–µ–º, –∞—Ö–≤–∑–∞—Ö–≤–∑–∞
    waiting_for_first = State()
    waiting_for_second = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π. –Ø –ø–æ–º–æ–≥—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω—à–µ—Ç–æ—á–∫—É –†–ö–°–ò.\n\n"
                         "üîé <b>–î–ª—è –ø–æ–∏—Å–∫–∞</b> /search\n\n"
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ /cancel\n"
                         "–î–ª—è –ø–æ–º–æ—â–∏ /help\n"
                         "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ /remove_pattern\n\n"
                         "‚ö† <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª</b> /rules\n\n",
                         reply_markup=ReplyKeyboardRemove())


@router.message(Command("gussi_pussi_i_am_very_glavnii"))
async def cmd_main_beach(message: types.Message, state: FSMContext):
    if message.from_user.id == Links_tg.main_beach:
        kb = [
            [
                KeyboardButton(text="0"),
                KeyboardButton(text="1"),
                KeyboardButton(text="2"),
                KeyboardButton(text="3"),
                KeyboardButton(text="4")
            ]
        ]

        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–µ–±–∞–Ω—å–∫–æ, –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å")

        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, main beach –∏–Ω —ç—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º, –µ—Å.\n'
                             f'–ü–æ–∏–≥—Ä–∞–µ–º –≤ –±–æ–≥–∞ –†–ö–°–ò?)\n\n'
                             f'0 - —Å–≤–æ–¥–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n'
                             f'1 - {"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–∫—É —Å–µ–≥–æ–¥–Ω—è ü•≥" if Links_tg.reduce_day == False else "—É–±—Ä–∞—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–∫—É —Å–µ–≥–æ–¥–Ω—è üëø"}\n'
                             f'2 - {"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–∫—É –∑–∞–≤—Ç—Ä–∞ ü•≥ü•≥" if Links_tg.reduce_day_tomorrow == False else "—É–±—Ä–∞—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–∫—É –∑–∞–≤—Ç—Ä–∞ üëø"}\n'
                             f'3 - —Ä–∞–∑–æ—Å–ª–∞—Å—Ç—å –≤—Å–µ–º/–ø–∞–ø–∏—â–∏–∫–∞–º –∫—Ä—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                             '4 - /cancel\n', reply_markup=keyboard)

        await state.set_state(DateStateMainBeach.waiting_for_first)
    else:
        await message.answer("–Ø —Ç–∞–∫ –Ω–µ –ø–æ–Ω–∏–º–∞—é\n"
                             "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


@router.message(DateStateMainBeach.waiting_for_first)
async def cmd_main_func(message: types.Message, state: FSMContext):
    what = ''

    try:
        if str(message.text) == '1':
            await cmd_reduce_day_today()
            what = 'cmd_reduce_day_today'
        elif str(message.text) == '2':
            await cmd_reduce_day_tomorrow()
            what = 'cmd_reduce_day_tomorrow'
        elif str(message.text) == '3':
            await cmd_message()
            what = 'cmd_message'
        elif str(message.text) == '4':
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–∞, –∑–∞–∫—Ä—É–≥–ª—è–µ–º—Å—è...\n")
            await state.clear()
            what = 'cancel_cmd'

        elif str(message.text) == '0':
            what = '—Å–≤–æ–¥–∫–∞ —á–µ'
            await message.answer(f'–°–æ–∫—Ä–∞—â—ë–Ω–∫–∞ —Å–µ–≥–æ–¥–Ω—è: {Links_tg.reduce_day}\n'
                                 f'–°–æ–∫—Ä–∞—â—ë–Ω–∫–∞ –∑–∞–≤—Ç—Ä–∞: {Links_tg.reduce_day_tomorrow}\n')

        await message.answer(f'–ë—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {what}\n'
                             f'/gussi_pussi_i_am_very_glavnii\n'
                             f'/search\n',
                             reply_markup=ReplyKeyboardRemove())

    except:
        e = sys.exc_info()[1]
        # print(e.args[0])
        await message.answer(f'–ë—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {what} –∏ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ {e.args[0]}\n'
                             f'–ü–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å —á—ë—Ç?)\n'
                             f'/gussi_pussi_i_am_very_glavnii\n'
                             f'/search\n',
                             reply_markup=ReplyKeyboardRemove())
    await state.clear()

    # await state.set_state(DateStateMainBeach.waiting_for_second)


# global reduce_day

async def cmd_reduce_day_today():
    if not Links_tg.reduce_day:
        Links_tg.reduce_day = True
    else:
        Links_tg.reduce_day = False


async def cmd_reduce_day_tomorrow():
    if not Links_tg.reduce_day_tomorrow:
        Links_tg.reduce_day_tomorrow = True
    else:
        Links_tg.reduce_day_tomorrow = False


async def cmd_message():
    pass


# async def cmd_reduce_day_today(message: types.Message, state: FSMContext):
#     pass

@router.message(Command("search"))
async def cmd_search(message: types.Message):
    kb = [
        [KeyboardButton(text="–ò—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é"),
         KeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, input_field_placeholder="–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
    await message.answer(
        "‚ö† –ü–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–∂–Ω–æ /rules\n\n"
        "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n",
        reply_markup=keyboard)


@router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ +79895099849\n"
                         "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search –∏ –¥–∞–ª—å—à–µ –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–º)\n"
                         "–ü—Ä–∏–Ω–∏–º–∞—é –∏ —Ç—Ä–µ–±—É—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!", reply_markup=ReplyKeyboardRemove())


@router.message(Command("cancel"))
async def cancel_cmd(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–∞, –∑–∞–∫—Ä—É–≥–ª—è–µ–º—Å—è...\n"
                         "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search", reply_markup=ReplyKeyboardRemove())
    await state.clear()


@router.message(F.text.lower() == "–∏—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é")
async def date_command(message: types.Message, state: FSMContext) -> None:
    with open('files_data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    # –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É, –≤—ã–≤–æ–¥—è –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è
    keyboard = [[KeyboardButton(text=str(key).replace(".xlsx", ""))] for key in data.keys()]

    keyboard = types.ReplyKeyboardMarkup(keyboard=keyboard, input_field_placeholder="–≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
    await state.set_state(DateState.waiting_for_date)


@router.message(DateState.waiting_for_date)
async def handle_date_choice(message: types.Message, state: FSMContext):
    selected_date = message.text

    with open('files_data.json', 'r', encoding='utf-8') as f:
        dates_data = json.load(f)

    if (str(selected_date) + ".xlsx") in dates_data:
        await state.update_data(selected_date=(str(selected_date) + ".xlsx"))
        keyboard = types.ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="–ö–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text='–ì—Ä—É–ø–ø–∞'),
             KeyboardButton(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')]
        ], input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
        await state.set_state(DateState.waiting_for_data_type)
    else:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")


@router.message(DateState.waiting_for_data_type)
async def handle_data_type_choice(message: types.Message, state: FSMContext):
    data_type = message.text
    if str(data_type).lower() in [
        '–∫–∞–±–∏–Ω–µ—Ç',
        '–≥—Ä—É–ø–ø–∞',
        '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'
    ]:
        await state.update_data(data_type=data_type)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {str(data_type.lower()).replace('–ø–ø–∞', '–ø–ø—É').replace('–∞—Ç–µ–ª—å', '–∞—Ç–µ–ª—è')}:\n\n"
                             f"–î–ª—è —Å–ø—Ä–∞–≤–∫–∏:\n"
                             "   1. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É, –≤–≤–æ–¥–∏—Ç—å –µ—ë –≤–∏–¥–∞ –ò–°-33 –∏–ª–∏ 2-–ò–°-3 –∏–ª–∏ –ü–û–ö–°-45w\n"
                             "   2. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ –ì–∞–ª—É—à–∫–∏–Ω–∞ –î.–ï.\n"
                             "   3. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–∞–±–∏–Ω–µ—Ç, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ 306 –∏–ª–∏ 110–∞ –∏–ª–∏ –û–±—â1-3\n\n"
                             "‚ö† –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è! ", reply_markup=ReplyKeyboardRemove())
        await state.set_state(DateState.waiting_for_value)
    else:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")


@router.message(DateState.waiting_for_value)
async def handle_value_input(message: types.Message, state: FSMContext):
    value = message.text
    await state.update_data(value=str(value).lower())
    keyboard = types.ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–í—Å–µ –ø–∞—Ä—ã'), KeyboardButton(text='–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è')]
    ], input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ '–í—Å–µ –ø–∞—Ä—ã' –∏–ª–∏ '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è':", reply_markup=keyboard)
    await state.set_state(DateState.waiting_for_action)


@router.message(DateState.waiting_for_action, F.text.lower() == '–≤—Å–µ –ø–∞—Ä—ã')
async def handle_all_classes_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # —É–¥–∞–ª–∏–ª–∞ –≤–µ–∑–¥–µ —ç—Ç—É –∑–∞–ª—É–ø—É. –ø–æ–¥ —á–µ–º –±—ã–ª –∞–≤—Ç–æ—Ä, –∫–æ–≥–¥–∞ –ø–∏—Å–∞–ª —Ç–∞–∫—É—é —Ö—É–µ—Ç—É??????????????????????????????????
    # lst_room = ["room_a", "room_d"]
    # lst_group = ["group_b", 'group_e']
    # lst_teacher = ["teacher_c", "teacher_f"]

    file_path = f'all_planchette/{str(data["selected_date"]).replace(".xlsx", "")}.json'
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            json_file = json.load(f)

        message_all = ""

        for num_para, items in json_file.items():
            await state.update_data(num_para=num_para)
            data = await state.get_data()

            if str(data['num_para']) in json_file:
                if data['data_type'].lower():
                    weekday = datetime.strptime(str(data["selected_date"]).rsplit('.', 1)[0], "%d.%m.%Y").weekday()
                    message_all += await handle_type(data, data['data_type'], data['value'], json_file, weekday)
                else:
                    message_all = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –≤—Å—ë –∑–∞–Ω–æ–≤–æ)\n"

            await state.update_data(num_para=None)  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–µ
        await message.answer(message_all, reply_markup=ReplyKeyboardRemove())

    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    finally:
        await state.clear()
        await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


@router.message(DateState.waiting_for_action, F.text.lower() == '–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è')
async def handle_concrete_choice(message: types.Message, state: FSMContext):
    data = await state.get_data()
    with open('data_concretn.json', 'r', encoding='utf-8') as f:
        data_concretn = json.load(f)

    keyboard = []

    for item in data_concretn.get(data['selected_date'], []):
        button = [KeyboardButton(text=item)]
        keyboard.append(button)

    keyboard = types.ReplyKeyboardMarkup(keyboard=keyboard, input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=keyboard)
    await state.set_state(DateState.waiting_for_concrete)


@router.message(DateState.waiting_for_concrete)
async def handle_concrete_choice_is(message: types.Message, state: FSMContext):
    num_para = message.text

    await state.update_data(num_para=num_para)
    data = await state.get_data()

    file_path = f'all_planchette/{str(data["selected_date"]).replace(".xlsx", "")}.json'

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            json_file = json.load(f)

        if str(data['num_para']) in json_file:
            if data['data_type'].lower():
                weekday = datetime.strptime(str(data["selected_date"]).rsplit('.', 1)[0], "%d.%m.%Y").weekday()
                messages = await handle_type(data, data['data_type'], data['value'], json_file, weekday)
                await message.answer(messages, reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    finally:
        await state.clear()
    await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


async def handle_type(data, data_type, data_value, json_file, weekday):
    found_items = []
    message_all = ""

    if isinstance(json_file[data['num_para']], list):
        for item in json_file[data['num_para']]:
            found = await handle_item(data, data_type, data_value, item, weekday)
            if found:
                found_items.append(found)
                message_all += found

    if not found_items:
        message_all += \
            f"‚ùå {str(data['num_para'])}: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç.\n\n"

    return message_all


async def handle_item(data, data_type, data_value, file, weekday):
    message_all = ""
    data_type = data_type.lower()
    key_lst = ['room', 'group', 'teacher']

    if ((Links_tg.reduce_day is True and weekday == datetime.now().date().weekday())
            or (Links_tg.reduce_day_tomorrow is True and weekday == 6)):
        with open('shedule/reduce_day.json', 'r', encoding='utf-8') as f:
            what_day = json.load(f)
    elif weekday == 0 or weekday == 6:
        with open('shedule/monday.json', 'r', encoding='utf-8') as f:
            what_day = json.load(f)
    elif weekday == 3:
        with open('shedule/thursday.json', 'r', encoding='utf-8') as f:
            what_day = json.load(f)
    elif weekday != 3 and weekday != 0:
        with open('shedule/ordinary_day.json', 'r', encoding='utf-8') as f:
            what_day = json.load(f)

    if data_type == '–∫–∞–±–∏–Ω–µ—Ç':
        key = key_lst[0]
        if file.get(key) is not None and str(data_value) == str(file.get(key)):
            if str(file.get(key_lst[1])).upper() != '–û–¢–°–£–¢–°–¢–í–£–ï–¢' and str(
                    file.get(key_lst[2])).title() != '–û–¢–°–£–¢–°–¢–í–£–ï–¢':
                message_all += \
                    f"‚úÖ {data['num_para']}.\n" \
                    f"  –í—Ä–µ–º—è: {what_day[data['num_para']]}\n" \
                    f"  –ö–∞–±–∏–Ω–µ—Ç: {file.get(key_lst[0])}\n" \
                    f"  –ì—Ä—É–ø–ø–∞: {str(file.get(key_lst[1])).upper()}\n" \
                    f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(file.get(key_lst[2])).title()}\n\n"
            else:
                message_all += \
                    f"‚ùå {data['num_para']}.\n" \
                    f"  –ö–∞–±–∏–Ω–µ—Ç –ø—É—Å—Ç!\n\n"

    if data_type == '–≥—Ä—É–ø–ø–∞':
        key = key_lst[1]
        if file.get(key) is not None and str(data_value) in file.get(key):
            message_all += \
                f"‚úÖ {data['num_para']}.\n" \
                f"  –í—Ä–µ–º—è: {what_day[data['num_para']]}\n" \
                f"  –ö–∞–±–∏–Ω–µ—Ç: {file.get(key_lst[0])}\n" \
                f"  –ì—Ä—É–ø–ø–∞: {str(file.get(key_lst[1])).upper()}\n" \
                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(file.get(key_lst[2])).title()}\n\n"

    if data_type == '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
        key = key_lst[2]
        if file.get(key) is not None and str(data_value) in file.get(key):
            message_all += \
                f"‚úÖ {data['num_para']}.\n" \
                f"  –í—Ä–µ–º—è: {what_day[data['num_para']]}\n" \
                f"  –ö–∞–±–∏–Ω–µ—Ç: {file.get(key_lst[0])}\n" \
                f"  –ì—Ä—É–ø–ø–∞: {str(file.get(key_lst[1])).upper() if str(file.get(key_lst[1])).upper() != '–û–¢–°–£–¢–°–¢–í–£–ï–¢' else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n" \
                f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(file.get(key_lst[2])).title()}\n\n"

    return message_all


class DataStateConst(StatesGroup):
    waiting_for_reg_pattern = State()
    waiting_for_data_type_const = State()
    waiting_for_value_const = State()


@router.message(F.text.lower() == "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")
async def pattern_reg_or_print(message: types.Message, state: FSMContext) -> None:
    with open('tg/pattern_for_user.json',
              'r', encoding='utf-8') as f:
        data_user = json.load(f)

    current_date = datetime.now()
    weekday = current_date.weekday()

    if weekday == 6:
        current_date += timedelta(days=1)
    #    current_date = date(2023, 1, 12)

    file_path = f'all_planchette/' \
                f'{current_date.strftime("%d.%m.%Y")}.json'

    user_id_for_pattern = str(message.from_user.id)
    try:
        with open(file_path, 'r') as f:
            json_file = json.load(f)

        if user_id_for_pattern in data_user:
            user_data = data_user[user_id_for_pattern]

            message_all = ""
            for num_para, items in json_file.items():
                await state.update_data(num_para=num_para)
                data = await state.get_data()
                for item in user_data:
                    type_for_search = item.get("type")
                    value_for_search = item.get("value")

                    if str(data['num_para']) in json_file:
                        if type_for_search.lower():
                            message_all += await handle_type(data, type_for_search, value_for_search, json_file,
                                                             weekday)

            if message_all != "":
                await message.answer(message_all, reply_markup=ReplyKeyboardRemove())
            else:
                await message.answer("–ü–∞—Ä –Ω–µ—Ç!",
                                     reply_markup=ReplyKeyboardRemove())
            await state.clear()
            await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")

        else:
            keyboard = types.ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="–î–∞"), KeyboardButton(text='–ù–µ—Ç')]],
                input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
            await message.answer("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω! –ñ–µ–ª–∞–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å?)", reply_markup=keyboard)

            await state.update_data(id_user_const=user_id_for_pattern)
            await state.set_state(DataStateConst.waiting_for_reg_pattern)

    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")


@router.message(DataStateConst.waiting_for_reg_pattern, F.text.lower() == '–¥–∞')
async def handle_date_choice_const(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ö–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text='–ì—Ä—É–ø–ø–∞'),
         KeyboardButton(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')]
    ], input_field_placeholder="–≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(DataStateConst.waiting_for_data_type_const)


@router.message(DataStateConst.waiting_for_data_type_const)
async def handle_data_type_choice_const(message: types.Message, state: FSMContext):
    type_value = message.text
    if str(type_value).lower() in [
        '–∫–∞–±–∏–Ω–µ—Ç',
        '–≥—Ä—É–ø–ø–∞',
        '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'
    ]:
        await state.update_data(type_value=type_value)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {str(type_value.lower()).replace('–ø–ø–∞', '–ø–ø—É').replace('–∞—Ç–µ–ª—å', '–∞—Ç–µ–ª—è')}:\n\n"
                             f"–î–ª—è —Å–ø—Ä–∞–≤–∫–∏:\n"
                             "   1. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É, –≤–≤–æ–¥–∏—Ç—å –µ—ë –≤–∏–¥–∞ –ò–°-33 –∏–ª–∏ 2-–ò–°-3 –∏–ª–∏ –ü–û–ö–°-45w\n"
                             "   2. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ –ì–∞–ª—É—à–∫–∏–Ω–∞ –î.–ï.\n"
                             "   3. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–∞–±–∏–Ω–µ—Ç, –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤–∏–¥–∞ 306 –∏–ª–∏ 110–∞ –∏–ª–∏ –û–±—â1-3\n\n"
                             "‚ö† –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!", reply_markup=ReplyKeyboardRemove())
        await state.set_state(DataStateConst.waiting_for_value_const)
    else:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")


@router.message(DataStateConst.waiting_for_value_const)
async def final_reg_const(message: types.Message, state: FSMContext):
    data = await state.get_data()

    id_value = str(data["id_user_const"])
    type_value = data["type_value"]
    value_value = str(message.text).lower()

    file_path1 = 'tg/pattern_for_user.json'

    try:
        with open(file_path1, 'r', encoding='utf-8') as file:
            existing_data = json.load(file)
    except FileNotFoundError:
        existing_data = {}

    new_entry = {
        "type": type_value,
        "value": value_value
    }

    existing_data[id_value] = [new_entry]
    with open(file_path1, 'w', encoding='utf-8') as file:
        json.dump(existing_data, file, ensure_ascii=False, indent=2)

    current_date = datetime.now()
    weekday = current_date.weekday()
    #
    if weekday == 6:
        current_date += timedelta(days=1)

    # current_date = date(2023, 1, 12)

    file_path = f'all_planchette/' \
                f'{current_date.strftime("%d.%m.%Y")}.json'

    user_id_for_pattern = id_value
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            json_file = json.load(f)

        user_data = existing_data[user_id_for_pattern]

        message_all = ""
        for num_para, items in json_file.items():
            await state.update_data(num_para=num_para)
            data = await state.get_data()
            for item in user_data:
                type_for_search = item.get("type")
                value_for_search = item.get("value")

                if str(data['num_para']) in json_file:
                    if type_for_search.lower():
                        message_all += await handle_type(data, type_for_search, value_for_search, json_file, weekday)

        if message_all != "":
            await message.answer(message_all, reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–ü–∞—Ä –Ω–µ—Ç!",
                                 reply_markup=ReplyKeyboardRemove())

    except FileNotFoundError:
        await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

    await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search\n\n–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω /remove_pattern\n")
    await state.clear()


@router.message(Command('remove_pattern'))
async def remove_pattern(message: types.Message):
    user_id = str(message.from_user.id)
    file_path = 'tg/pattern_for_user.json'

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            existing_data = json.load(file)
    except FileNotFoundError:
        existing_data = {}

    if user_id in existing_data:
        del existing_data[user_id]

        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(existing_data, file, ensure_ascii=False, indent=2)

        await message.answer("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.", reply_markup=ReplyKeyboardRemove())


@router.message(Command('rules'))
async def print_rules(message: types.Message):
    await message.answer("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:</b>"
                         "\n1. –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /search"
                         "\n2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <b>'–ò—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é'</b>"
                         "\n3. –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é <b>–¥–∞—Ç—É</b>"
                         "\n4. –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π <b>—Ç–∏–ø –ø–æ–∏—Å–∫–∞</b> (–ö–∞–±–∏–Ω–µ—Ç/–ì—Ä—É–ø–ø–∞/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)"
                         "\n5. –í–≤–µ—Å—Ç–∏ <b>–∑–Ω–∞—á–µ–Ω–∏–µ</b> (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ!)"
                         "\n6. –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é <b>–ø–∞—Ä—É/–≤—Å–µ –ø–∞—Ä—ã</b>.\n\n"
                         "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</b>"
                         "\n1. –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /search"
                         "\n2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É <b>'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω'</b>"
                         "\n3. <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</b> —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: "
                         "\n      –∞) –í—ã–±—Ä–∞—Ç—å <b>'–¥–∞'</b>"
                         "\n      –±) –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π <b>—Ç–∏–ø –ø–æ–∏—Å–∫–∞</b> (–ö–∞–±–∏–Ω–µ—Ç/–ì—Ä—É–ø–ø–∞/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)"
                         "\n      –≤) –í–≤–µ—Å—Ç–∏ <b>–∑–Ω–∞—á–µ–Ω–∏–µ</b> (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ!)"
                         "\n4. –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b> —à–∞–±–ª–æ–Ω, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω'</b>\n"
                         "\n–ò—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ <b>–≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å</b> (–∏–ª–∏ <b>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b>, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).\n\n"
                         "–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω /remove_pattern"
                         "\n–í—ã –º–æ–∂–µ—Ç–µ <b>—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π</b> —à–∞–±–ª–æ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)",
                         reply_markup=ReplyKeyboardRemove())


# —Å–ø–µ—à–ª —Ñ–æ—Ä –∑–µ –±—å—é—Ç–∏—Ñ—É–ª –≤—É–º—ç–Ω, –≤—Ö–∏—á –∏—Å –±—ç—Å—Ç –æ—Ñ –∑–µ –±—ç—Å—Ç
@router.message(Command('boolean_balagan_today'))
async def print_boolean_balagan(message: types.Message):
    current_date = datetime.now()
    weekday = current_date.weekday()

    if weekday == 6:
        current_date += timedelta(days=1)

    file_path = f'all_planchette/' \
                f'{current_date.strftime("%d.%m.%Y")}.json'

    message_all = ""
    message_all = await boolean_balagan(message_all, file_path)

    if message_all != "":
        await message.answer("–ë–∞–ª–∞–≥–∞–Ω –±—É–¥—ç\n\n" + str(message_all), reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–ë–∞–ª–∞–≥–∞–Ω–∞ –Ω–µ –±—É–¥—ç",
                             reply_markup=ReplyKeyboardRemove())

    await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search\n")


@router.message(Command('boolean_balagan_tomorrow'))
async def print_boolean_balagan(message: types.Message):
    current_date = datetime.now()
    current_date += timedelta(days=1)
    weekday = current_date.weekday()

    if weekday == 6:
        current_date += timedelta(days=1)

    file_path = f'all_planchette/' \
                f'{current_date.strftime("%d.%m.%Y")}.json'

    message_all = ""
    message_all = await boolean_balagan(message_all, file_path)

    if message_all != "":
        await message.answer("–ë–∞–ª–∞–≥–∞–Ω –±—É–¥—ç\n\n" + str(message_all), reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–ë–∞–ª–∞–≥–∞–Ω–∞ –Ω–µ –±—É–¥—ç",
                             reply_markup=ReplyKeyboardRemove())

    await message.answer("üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search\n")


async def boolean_balagan(message_all, file_path):
    lst_room = ["room_a", "room_d"]
    lst_group = ["group_b", 'group_e']
    lst_teacher = ["teacher_c", "teacher_f"]

    with open(file_path, 'r') as f:
        json_file = json.load(f)
        type_for_search = "–ö–∞–±–∏–Ω–µ—Ç"
        value_for_search = "–æ–±—â"
        if type_for_search and value_for_search:
            for num_para, items in json_file.items():
                for teacher_key in lst_teacher:
                    if str(num_para) in json_file:
                        for item1 in json_file[str(num_para)]:
                            if item1.get(teacher_key) is not None and "–∫–æ—à–∫–∏–Ω–∞" in item1.get(teacher_key):
                                nums_par = str(num_para)
                                if nums_par in json_file:
                                    for item2 in json_file[nums_par]:
                                        for room_key in lst_room:
                                            if item2.get(room_key) is not None and value_for_search in str(
                                                    item2.get(room_key)).lower() and str(
                                                item2.get(
                                                    lst_group[
                                                        lst_room.index(room_key)])).title() != "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" and str(
                                                item2.get(
                                                    lst_teacher[lst_room.index(room_key)])) != "–∫–æ—à–∫–∏–Ω–∞ –∞.–∞.":
                                                message_all += \
                                                    f"‚úÖ {nums_par}.\n" \
                                                    f"  –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {str(item2.get(lst_teacher[lst_room.index(room_key)])).title()}\n\n"
    return message_all


@router.message(DataStateConst.waiting_for_reg_pattern, F.text.lower() == '–Ω–µ—Ç')
async def handle_date_choice_const(message: types.Message):
    await message.answer("–õ–∞–¥–Ω–æ.", reply_markup=ReplyKeyboardRemove())


@router.message(F.text.lower())
async def another_data_command(message: types.Message) -> None:
    await message.answer("–Ø —Ç–∞–∫ –Ω–µ –ø–æ–Ω–∏–º–∞—é\n"
                         "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ /search")


async def main() -> None:
    bot = Bot(token=Links_tg.api_tg, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
